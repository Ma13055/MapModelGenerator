======================================================================
  RTComponent: CVFindContours specificatioin

  OpenRTM-aist-1.0.0
  Date: $Date$

  @author 立川将(Tatekawa Masaru)
   Email:y09148@shibaura-it.ac.jp

  This file is generated by rtc-template with the following argments.

#   rtc-template -bcxx --module-name=CVFindContours 
#   --module-desc='与えられた二値画像に対して輪郭検出を行う' --module-version=1.2.0 --module-vendor=Masaru Tatekawa(SIT) 
#   --module-category=Image Processing --module-comp-type=UNIQUE 
#   --module-act-type=PERIODIC --module-max-inst=1 
#   --config=01_ImageView:string:OFF --config=02_sendDataType:string:Rectangle,Convex --config=03_FindContourMode:string:EXTERNAL --config=04_FindContourMethod:string:NONE --config=05_offset:vector<int>:0,0 
#   --inport=srcImage:RTC::CameraImage --inport=thresholdImage:RTC::CameraImage --outport=contoursData:RTC::TimedShortSeq --outport=contoursRectangles:RTC::TimedShortSeq --outport=contoursConvex:RTC::TimedShortSeq 


======================================================================
    Basic Information
======================================================================
# <rtc-template block="module">
Module Name: CVFindContours
Description: 与えられた二値画像に対して輪郭検出を行う
Version:     1.2.0
Vendor:      Masaru Tatekawa(SIT)
Category:    Image Processing
Kind:        DataFlowComponent
Comp. Type:  UNIQUE
Act. Type:   PERIODIC
MAX Inst.:   1
Lang:        C++
Lang Type:   

Overview:    入力された二値画像に対して、コンフィギュレーションパラ
             メータで与えられた検出法や閾値を用いて輪郭検出を行うコ
             ンポーネント
In/Out:      入力
             srcImage[CameraImage] -
             輪郭検出の結果を描画しその変換閾値などを確認するために
             用いる二値化前のカラー画像データ
             thresholdImage[CameraImage] - 輪郭検出の対象二値画像
             出力
             contoursData[TimedShortSeq] -
             輪郭検出の結果となるContoursを配列化したデータ
             contoursRectangles [TimedShortSeq] -
             長方形化した輪郭データの配列
             contoursConvex [TimedShortSeq] -
             凸図形化した輪郭データの配列
Algorithm:   入力二値画像に対して輪郭検出を行い、結果を描画しつつT
             imedShortSeqに配列化して送る
             入力やコンフィギュの値を常に確認し、どこか一つでも変更
             があると輪郭の再検出を行う
             出力ポートに送信されるタイミングは、検出後一度きり
# </rtc-template>


======================================================================
    Activity definition
======================================================================

[on_initialize]    implemented

[on_finalize]

[on_startup]

[on_shutdown]

[on_activated]     implemented
	Description:   初期化を行う

[on_deactivated]   implemented
	Description:   表示ウィンドウを閉じる

[on_execute]       implemented
	Description:   輪郭検出を行う

[on_aborting]

[on_error]

[on_reset]         implemented
	Description:   表示ウィンドウを閉じる

[on_state_update]

[on_rate_changed]

======================================================================
    InPorts definition
======================================================================
# <rtc-template block="inport">

	Name:        srcImage
	PortNumber:  0
	Description: 二値化前のカラー画像を受け取るポート
	PortType: 
	DataType:    RTC::CameraImage
	MaxOut: 
	[Data Elements]
		Name:
		Type:            CameraImage
		Number:          1
		Semantics:       この画像に対し輪郭検出の結果を書き込み、閾値な
		                 どの検討を行う
		Unit:            
		Frequency:       
		Operation Cycle: 
		RangeLow:
		RangeHigh:
		DefaultValue:

	Name:        thresholdImage
	PortNumber:  1
	Description: 輪郭検出を行う二値画像を受け取るポート
	PortType: 
	DataType:    RTC::CameraImage
	MaxOut: 
	[Data Elements]
		Name:
		Type:            CameraImage
		Number:          1
		Semantics:       輪郭検出を行いたいデータ
		                 ここの接続がない場合は、srcImageの画像を固定値
		                 で二値化し輪郭検出を行う
		Unit:            
		Frequency:       
		Operation Cycle: 
		RangeLow:
		RangeHigh:
		DefaultValue:


# </rtc-template>

======================================================================
    OutPorts definition
======================================================================
# <rtc-template block="outport">

	Name:        contoursData
	PortNumber:  0
	Description: 検出によって得た輪郭点群
	PortType: 
	DataType:    RTC::TimedShortSeq
	MaxOut: 
	[Data Elements]
		Name:
		Type:            TimedShortSeq
		Number:          検出輪郭群数*(1+輪郭点数*2)
		Semantics:       検出結果のcontoursの要素を配列化して送信する
		                 Point p1,p2,p3,p4からなるVector<Point>
		                 convex1に対し
		                 - convex1.size() [0]
		                 - convex1.p1.x [1]
		                 - convex1.p1.y [2]
		                 - convex1.p2.x [3]
		                 - convex1.p2.y [4]
		                 - convex1.p3.x [5]
		                 - convex1.p3.y [6]
		                 - convex1.p4.x [7]
		                 - convex1.p4.y [8]
		                 これら9つの要素を配列に格納して送る
		                 すなわち[0]~[8]で一つの図形となる
		                 受け取り側は[0]にあたるデータ数分のPointが来る
		                 と認識し、
		                 そのPoint数分格納したら次のvector処理へ進む
		Unit:            
		Frequency:       
		Operation Cycle: 
		RangeLow:
		RangeHigh:
		DefaultValue:

	Name:        contoursRectangles
	PortNumber:  1
	Description: 検出によって得られた輪郭点群からなる長方形データを送
	             るためのポート
	PortType: 
	DataType:    RTC::TimedShortSeq
	MaxOut: 
	[Data Elements]
		Name:
		Type:            TimedShortSeq
		Number:          長方形数*4
		Semantics:       Rectangleの要素を配列化して送信する
		                 Rectangle
		                 r1の左上の点p1.x,p1.yとwidth,heightを
		                 - r1.p1.x [0]
		                 - r1.p1.y [1]
		                 - r1.width [2]
		                 - r1.height [3]
		                 これら4つの要素を配列に格納して送る
		                 すなわち[0]~[3]で一つの長方形となる
		Unit:            
		Frequency:       
		Operation Cycle: 
		RangeLow:
		RangeHigh:
		DefaultValue:

	Name:        contoursConvex
	PortNumber:  2
	Description: 輪郭検出によって得られた輪郭点群からなる凸図形のデー
	             タを送るためのポート
	PortType: 
	DataType:    RTC::TimedShortSeq
	MaxOut: 
	[Data Elements]
		Name:
		Type:            TimedShortSeq
		Number:          全図形数*(1+図形の持つ凸数*2)
		Semantics:       convexとして用いるvect<Point>のデータを配列化
		                 して送信する
		                 Pointp1,p2,p3,p4からなるVector<Point>
		                 convex1に対し
		                 - convex1.size() [0]
		                 - convex1.p1.x [1]
		                 - convex1.p1.y [2]
		                 - convex1.p2.x [3]
		                 - convex1.p2.y [4]
		                 - convex1.p3.x [5]
		                 - convex1.p3.y [6]
		                 - convex1.p4.x [7]
		                 - convex1.p4.y [8]
		                 これら9つの要素を配列に格納して送る
		                 すなわち[0]~[8]で一つの図形となる
		                 受け取り側は、[0]にあたるデータ数分のPointが来
		                 ると認識し、
		                 そのPoint数分格納したら次のvector処理へ進む
		Unit:            
		Frequency:       
		Operation Cycle: 
		RangeLow:
		RangeHigh:
		DefaultValue:


# </rtc-template>


======================================================================
    Service Port definition
======================================================================
# <rtc-template block="serviceport">
# </rtc-template> 

======================================================================
    Configuration definition
======================================================================
# <rtc-template block="configuration">
	Configuration:
		Name:            string 01_ImageView
		Description:     画像表示を選択するための変数
		Type:            string
		DefaultValue:    OFF OFF
		Unit:            
		Range:           
		Constraint:      

		Name:            string 02_sendDataType
		Description:     出力するデータタイプを選択する変数
		Type:            string
		DefaultValue:    Rectangle,Convex Rectangle,Convex
		Unit:            
		Range:           
		Constraint:      NonExchange - 無変換の輪郭点データを出力する
		                 Rectangle -
		                 輪郭点データを基に長方形データを作成し出力する
		                 Convex -
		                 輪郭点データを基に凸図形データを作成し出力する
		                 Convex -

		Name:            string 03_FindContourMode
		Description:     輪郭検出のモードを選択するための変数
		Type:            string
		DefaultValue:    EXTERNAL EXTERNAL
		Unit:            
		Range:           
		Constraint:      CV_RETR_EXTERNAL -
		                 最も外側の輪郭のみを抽出する
		                 CV_RETR_LIST -
		                 すべての輪郭を抽出し，それらをリストに保存する
		                 CV_RETR_CCOMP -
		                 すべての輪郭を抽出し，をれらを2階層構造として
		                 保存する：上のレベルには，連結成分の外側の境界
		                 線が，下のレベルには，連結成分の内側に存在する
		                 穴の境界線が属する
		                 CV_RETR_TREE -
		                 すべての輪郭を抽出し，入れ子構造になった輪郭を
		                 完全に表現する階層構造を構成する

		Name:            string 04_FindContourMethod
		Description:     輪郭検出のメソッドを選択するための変数
		Type:            string
		DefaultValue:    NONE NONE
		Unit:            
		Range:           
		Constraint:      CV_CHAIN_APPROX_NONE -
		                 チェーンコードの全ての点を，通常の点群に変換す
		                 る
		                 CV_CHAIN_APPROX_SIMPLE -
		                 水平・垂直・斜めの線分を圧縮し，それらの端点の
		                 みを残す
		                 CV_CHAIN_APPROX_TC89_L1,CV_CHAIN_APPROX_TC89_
		                 KCOS -
		                 Teh-Chinチェーン近似アルゴリズムの1つを適用す
		                 る
		                 CV_LINK_RUNS -
		                 値が1のセグメントを水平方向に接続する，全く異
		                 なる輪郭抽出アルゴリズム.
		                 ただし、CV_LINK_RUNSはCVRETR_LISTが選択されて
		                 いなければ使うことができないため、モードがLIS
		                 Tでない場合は、CODEを用いるように変更される

		Name:            vector<int> 05_offset
		Description:     オプションのオフセット
		                 各輪郭点はこの値の分だけシフトします
		Type:            vector<int>
		DefaultValue:    0,0 0,0
		Unit:            
		Range:           
		Constraint:      

# </rtc-template> 

This software is developed at the National Institute of Advanced
Industrial Science and Technology. Approval number H23PRO-????. This
software is licensed under the Lesser General Public License. See
COPYING.LESSER.

This area is reserved for future OpenRTM.

